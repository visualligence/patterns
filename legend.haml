- text_style = "font-size:1px;font-family:Droid Sans Mono;"
- rect_style = "stroke:white;stroke-width:.1px;"
- len_rect   = 2.0 # un rectÃ¡ngulo ocupa 2 caracteres
- font_ratio = 0.6
- spacing    = 1.0
- interlin   = 1.15
- sx = 0.0
%g{ :transform => "scale(10)" }
	- data[0].keys.each do |k|
		- mac_k = HMAC::MD5.new('').update( k ).hexdigest.to_i( 16 )
		- sy = 1.0
		%text{ :x => sx, :y => sy, :style => text_style }= k.to_s
		- sy = sy + interlin

		- max_value = data.max_by{|a| a[k].to_f}[k] rescue nil
		- min_value = data.min_by{|a| a[k].to_f}[k] rescue nil

		- numeric = true
		- begin
			- a = 0 + min_value + max_value
		- rescue
			- numeric = false
		- if numeric
			-(0..10).each do |i|
				- color = "hsl(#{ (mac_k+i) % 360 }, 100%, #{ 20.0 + 2.5 * i.to_f }%)"
				%rect{ :x => sx, :y => i+1.2, :height => 1, :width => 1, :style => "#{rect_style};fill:#{color}" }
				-if( [0,10].include? i )
					%text{ :x => sx+1.2, :y => i+2.0, :style => "#{text_style};fill:#{color}" }
						-if( i == 0 )
							= min_value
						-else
							= max_value
		- else
			- legend = {}
			- data.sort_by{ |a| a[k] }.each_with_index do |d,i|
				- value = d[ k ]
				- mac_v = HMAC::MD5.new('').update( value.to_s ).hexdigest.to_i( 16 )
				-begin
					-legend[ value ] ||= "hsl(#{ mac_v % 360 }, 45%, 35%)"
				-rescue
					-legend[ value ] ||= "#aaaa00"

			- legend.each do |v,color|
				%rect{ :x => sx    , :y => sy-0.8, :height => 1, :width => 1, :style => "#{rect_style};fill:#{color}" }
				%text{ :x => sx+1.2, :y => sy,                                :style => "#{text_style};fill:#{color}" }= v
				- sy = sy + interlin

		- max_len  = data.max_by{|a| a[k].size }[k].size.to_f
		- len_k    = k.to_s.size.to_f
		- begin
			- sx = sx + [ max_len + len_rect , len_k ].max * font_ratio
		- sx = sx + spacing